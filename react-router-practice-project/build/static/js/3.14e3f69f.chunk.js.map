{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.14e3f69f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__27Gg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__12HVw\",\"loading\":\"NewCommentForm_loading__12S7G\",\"control\":\"NewCommentForm_control__2oNvH\",\"actions\":\"NewCommentForm_actions__3Lya7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2-9Iu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2Mt2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3X9vI\"};","import { useRef,useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest,status,error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    }\n  },[status,error,onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: {text: enteredText},quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner/>\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n  const {quoteId} = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  },[quoteId,sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest,quoteId]);\n\n  let comments;\n  \n  if(status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = (\n      <CommentsList comments = {loadedComments}/>\n    )\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={params.quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n    const {quoteId} = params;\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote,true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    },[sendRequest,quoteId]);\r\n\r\n    if(status === 'pending') {\r\n        return <div className='centered'><LoadingSpinner /></div>\r\n    }\r\n\r\n    if(error) {\r\n        return <p className=\"centered\">{error}</p>\r\n    }\r\n\r\n    if(!loadedQuote.text) {\r\n        return <p>No quote found</p>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n            <Route path={match.path} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n            </Route>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}